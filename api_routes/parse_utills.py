import re
from datetime import datetime


def format_date(date_string):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –≤–∏–¥–µ "–î–î –ú–µ—Å –ì–ì:–ú–ú" —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏ –º–µ—Å—è—Ü–µ–≤.

    Args:
        date_string: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç–µ.

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π.
    """

    date_obj = datetime.fromisoformat(date_string.replace("Z", "+00:00"))
    months_ru = ["—è–Ω–≤.", "—Ñ–µ–≤—Ä.", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä.", "–º–∞—è", "–ò—é–Ω—è", "–ò—é–ª—è", "–∞–≤–≥.", "—Å–µ–Ω—Ç.", "–æ–∫—Ç–±.", "–Ω–æ—è–±.", "–¥–µ–∫."]
    return f"{date_obj.day} {months_ru[date_obj.month - 1]} {date_obj.year} {date_obj.hour}:{date_obj.minute}"


def escape_markdown_v2(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram Markdown V2.
    """
    escape_chars = r"~`>#=|{}"
    return re.sub(r"([{}])".format(re.escape(escape_chars)), r"\\\1", text)


def parse_order_message(message_data: dict):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JSON-–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    # –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_type = message_data["delivery"]["type"]
    delivery_type_mapping = {
        "DELIVERY": "–î–æ—Å—Ç–∞–≤–∫–∞",
        "TO_OUTSIDE": "–°–∞–º–æ–≤—ã–≤–æ–∑",
        "ON_PLACE": "–ù–∞ –º–µ—Å—Ç–µ",
    }
    delivery_type_text = delivery_type_mapping.get(
        delivery_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏"
    )

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    delivery_info = []
    if delivery_type == "DELIVERY":
        delivery_address = message_data["delivery"].get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
        delivery_info.append(f"üó∫  –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: *{delivery_address}*\n")
        delivery_info.append(
            f"üîê –ö–æ–¥ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞: *{message_data['delivery']['pickupCode']}*\n"
        )
        additional_info = [
            (
                f"–∫–≤. *{message_data['delivery']['flat']}*"
                if message_data["delivery"].get("flat")
                else ""
            ),
            (
                f"—ç—Ç–∞–∂ *{message_data['delivery']['floor']}*"
                if message_data["delivery"].get("floor")
                else ""
            ),
            (
                f"–ø–æ–¥—ä–µ–∑–¥ *{message_data['delivery']['porch']}*"
                if message_data["delivery"].get("porch")
                else ""
            ),
            (
                f"–∫–æ–¥ –¥–≤–µ—Ä–∏ *{message_data['delivery']['doorCode']}*"
                if message_data["delivery"].get("doorCode")
                else ""
            ),

        ]
        additional_info = [info for info in additional_info if info]
        if additional_info:
            delivery_info.append(
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è: " + ", ".join(additional_info)
            )
    elif delivery_type in {"TO_OUTSIDE", "ON_PLACE"}:
        restaurant_address = message_data.get("restaurantAddress",
                                              "–ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        delivery_info.append(f"üìç –ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {restaurant_address}")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = []
    for product in message_data["products"]:
        product_name = f"*{product['title']}*"
        weight_info = f" (–≤–µ—Å: {product['weight']})" if product.get(
            "weight") else ""
        product_details = f"*(—Ö{product['amount']})* ‚Äî {product['price']} ‚ÇΩ"
        product_line = f"‚ñ´Ô∏è {product_name}{weight_info} {product_details}"
        if product.get("additions"):
            additions = "\n".join(
                [
                    f"     + {add['title']} (—Ö{add['amount']}) ‚Äî {add['price']} ‚ÇΩ"
                    for add in product["additions"]
                ]
            )
            product_line += f"\n{additions}"
        products.append(product_line)

    products_text = "\n".join(products)

    place = message_data["places"]
    place_title = place.get("title", "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    ready_time = (
        format_date(message_data["readyTime"])
        if message_data.get("readyTime")
        else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status_mapping = {
        "CANCELLED_BY_PROVIDER":  "–û—Ç–º–µ–Ω–µ–Ω –∫–∞—Å—Å–∏—Ä–æ–º.",
        "CANCELLED_BY_CLIENT": "–û—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º.",
        "IN_PROGRESS": "–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É",
        "PAID": "–û–ø–ª–∞—á–µ–Ω",
        "CANCELED_BY_TIMEOUT": "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω - –Ω–µ –±—ã–ª –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É"
    }
    status_text = status_mapping.get(
        message_data["status"], "–°—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    )
    delivery_price_text = ""
    if message_data['delivery'].get("price") and delivery_type == "DELIVERY":
        delivery_price_text = f"üèé  –î–æ—Å—Ç–∞–≤–∫–∞: {message_data['delivery']['price']} ‚ÇΩ\n"

    message_text = escape_markdown_v2(
        f"–ó–∞–∫–∞–∑ ‚Ññ: *{message_data['orderNumber']}*\n"
        f"üïí –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏: *{ready_time}*\n"
        f"üì¶ –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: *{delivery_type_text}*\n"
        f"üí≥ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: *{status_text}*\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: *{message_data['customerInfo']['customerName']}* "
        f"({message_data['customerInfo']['customerPhone']})\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: *{message_data.get('personsCount', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}*\n\n"
        f"üìç –ú–µ—Å—Ç–æ: {place_title}\n"
        f"{''.join(delivery_info)}\n\n"
        f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
        f"{products_text}\n"
        f"{delivery_price_text}"
        f"üí∞ –ò—Ç–æ–≥–æ: {message_data['totalCost']} ‚ÇΩ"
    )
    order_link = message_data.get("order_link")
    if order_link:
        message_text += escape_markdown_v2(
            f"\n\n[–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ]({order_link})"
        ) + " "

    return message_text

