import re
from datetime import datetime


def format_date(date_string):
    date_obj = datetime.fromisoformat(date_string.replace("Z", "+00:00"))
    return date_obj.strftime("%Y-%m-%d %H:%M")


def escape_markdown_v2(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram Markdown V2.
    """
    escape_chars = r"_[]~`>#=|{}"
    return re.sub(r"([{}])".format(re.escape(escape_chars)), r"\\\1", text)


def parse_order_message(message_data: dict):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JSON-–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    # –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_type = message_data["delivery"]["type"]
    delivery_type_mapping = {
        "DELIVERY": "–î–æ—Å—Ç–∞–≤–∫–∞",
        "TO_OUTSIDE": "–°–∞–º–æ–≤—ã–≤–æ–∑",
        "ON_PLACE": "–ù–∞ –º–µ—Å—Ç–µ",
    }
    delivery_type_text = delivery_type_mapping.get(
        delivery_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏"
    )

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    delivery_info = []
    if delivery_type == "DELIVERY":
        delivery_address = message_data["delivery"].get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
        delivery_info.append(f"üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏*: {delivery_address}")

        additional_info = [
            (
                f"–∫–≤. {message_data['delivery']['flat']}"
                if message_data["delivery"].get("flat")
                else ""
            ),
            (
                f"—ç—Ç–∞–∂ {message_data['delivery']['floor']}"
                if message_data["delivery"].get("floor")
                else ""
            ),
            (
                f"–ø–æ–¥—ä–µ–∑–¥ {message_data['delivery']['porch']}"
                if message_data["delivery"].get("porch")
                else ""
            ),
            (
                f"–∫–æ–¥ –¥–≤–µ—Ä–∏ {message_data['delivery']['doorCode']}"
                if message_data["delivery"].get("doorCode")
                else ""
            ),
            (
                f"—Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {message_data['delivery']['status']}"
                if message_data["delivery"].get("status")
                else ""
            ),
        ]
        additional_info = [info for info in additional_info if info]
        if additional_info:
            delivery_info.append(
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è: " + ", ".join(additional_info)
            )

    elif delivery_type == "TO_OUTSIDE":
        if message_data["delivery"].get("pickupCode"):
            delivery_info.append(
                f"üìç *–ö–æ–¥ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞*: {message_data['delivery']['pickupCode']}"
            )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = []
    for product in message_data["products"]:
        product_line = (
            f"- {product['title']} (x{product['amount']}) ‚Äî {product['price']}‚ÇΩ"
        )
        if product.get("additions"):
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–î–æ–±–∞–≤–∫–∏"
            additions = "\n".join(
                [
                    f"  ‚îî‚ûï {add['title']} (x{add['amount']}) ‚Äî {add['price']}‚ÇΩ"
                    for add in product["additions"]
                ]
            )
            product_line += f"\n*–î–æ–±–∞–≤–∫–∏:*\n{additions}"
        products.append(product_line)
    products_text = "\n".join(products)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ
    place = message_data["places"]
    place_title = place.get("title", "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    ready_time = (
        format_date(message_data["readyTime"])
        if message_data.get("readyTime")
        else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    )
    created_at = (
        format_date(message_data["createdAt"])
        if message_data.get("createdAt")
        else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status_mapping = {
        "CANCELLED_BY_PROVIDER": ("‚ùå", "–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º."),
        "CANCELLED_BY_CLIENT": ("‚ùå", "–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º."),
        "IN_PROGRESS": ("üì¶", "–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!"),
        "PAID": ("üì¶", "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!"),
    }
    emoji, status_text = status_mapping.get(
        message_data["status"], ("‚ÑπÔ∏è", "–°—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = escape_markdown_v2(
        f"{emoji} *{status_text}*\n\n"
        f"üìç *–ú–µ—Å—Ç–æ*: {place_title}\n"
        f"üî¢ *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞*: {message_data['orderNumber']}\n"
        f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω*: {message_data.get('personsCount', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üïí *–í—Ä–µ–º—è –≤—ã–¥–∞—á–∏*: {ready_time}\n"
        f"üïí *–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞*: {created_at}\n"
        f"üë§ *–ö–ª–∏–µ–Ω—Ç*: {message_data['customerInfo']['customerName']} ({message_data['customerInfo']['customerPhone']})\n"
        f"üöö *–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏*: {delivery_type_text}\n"
        f"{''.join(delivery_info)}\n"
        f"üõí *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n{products_text}\n"
        f"üí∞ *–ò—Ç–æ–≥–æ*: {message_data['totalCost']}‚ÇΩ"
    )

    return message_text
